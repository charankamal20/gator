// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: FeedFollows.sql

package database

import (
	"context"
	"database/sql"
	"time"
)

const createFeedFollow = `-- name: CreateFeedFollow :one
with inserted as (
    insert into feed_follows (
        id,
        feed_id,
        user_id,
        created_at
    ) values (
        $1,
        $2,
        $3,
        now()
    )
    returning id, feed_id, user_id, created_at
)
select
    inserted.id,
    inserted.feed_id,
    inserted.user_id,
    inserted.created_at,
    feeds.name as feed_name,
    users.name as user_name
from inserted
join feeds on feeds.id = inserted.feed_id
join users on users.id = inserted.user_id
`

type CreateFeedFollowParams struct {
	ID     string
	FeedID string
	UserID string
}

type CreateFeedFollowRow struct {
	ID        string
	FeedID    string
	UserID    string
	CreatedAt time.Time
	FeedName  string
	UserName  sql.NullString
}

func (q *Queries) CreateFeedFollow(ctx context.Context, arg CreateFeedFollowParams) (CreateFeedFollowRow, error) {
	row := q.db.QueryRowContext(ctx, createFeedFollow, arg.ID, arg.FeedID, arg.UserID)
	var i CreateFeedFollowRow
	err := row.Scan(
		&i.ID,
		&i.FeedID,
		&i.UserID,
		&i.CreatedAt,
		&i.FeedName,
		&i.UserName,
	)
	return i, err
}

const getFeedFollowsForUser = `-- name: GetFeedFollowsForUser :many
select
    feed_follows.id,
    feed_follows.feed_id,
    feed_follows.user_id,
    feed_follows.created_at,
    feeds.name as feed_name,
    users.name as user_name
from feed_follows
join feeds on feeds.id = feed_follows.feed_id
join users on users.id = feed_follows.user_id
where feed_follows.user_id = $1
`

type GetFeedFollowsForUserRow struct {
	ID        string
	FeedID    string
	UserID    string
	CreatedAt time.Time
	FeedName  string
	UserName  sql.NullString
}

func (q *Queries) GetFeedFollowsForUser(ctx context.Context, userID string) ([]GetFeedFollowsForUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getFeedFollowsForUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFeedFollowsForUserRow
	for rows.Next() {
		var i GetFeedFollowsForUserRow
		if err := rows.Scan(
			&i.ID,
			&i.FeedID,
			&i.UserID,
			&i.CreatedAt,
			&i.FeedName,
			&i.UserName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
