// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: posts.sql

package database

import (
	"context"
	"database/sql"
	"time"
)

const createPost = `-- name: CreatePost :one
insert into posts
(
    id,
    title,
    description,
    url,
    feed_id,
    published_at,
    created_at,
    updated_at
)
values
(
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    now(),
    now()
)
returning id, title, url, description, published_at, feed_id, created_at, updated_at
`

type CreatePostParams struct {
	ID          string
	Title       string
	Description string
	Url         string
	FeedID      string
	PublishedAt time.Time
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, createPost,
		arg.ID,
		arg.Title,
		arg.Description,
		arg.Url,
		arg.FeedID,
		arg.PublishedAt,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Url,
		&i.Description,
		&i.PublishedAt,
		&i.FeedID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPostsForUser = `-- name: GetPostsForUser :many
select p.id, title, p.url, description, published_at, feed_id, p.created_at, p.updated_at, f.id, f.name, f.url, user_id, f.created_at, f.updated_at, last_fetched_at, u.id, u.created_at, u.updated_at, u.name
from posts p
join feeds f on p.feed_id = f.id
join users u on f.user_id = u.id
where u.id = $1
order by p.published_at desc
limit $2
`

type GetPostsForUserParams struct {
	ID    string
	Limit int32
}

type GetPostsForUserRow struct {
	ID            string
	Title         string
	Url           string
	Description   string
	PublishedAt   time.Time
	FeedID        string
	CreatedAt     time.Time
	UpdatedAt     time.Time
	ID_2          string
	Name          string
	Url_2         string
	UserID        string
	CreatedAt_2   time.Time
	UpdatedAt_2   time.Time
	LastFetchedAt sql.NullTime
	ID_3          string
	CreatedAt_3   sql.NullTime
	UpdatedAt_3   sql.NullTime
	Name_2        sql.NullString
}

func (q *Queries) GetPostsForUser(ctx context.Context, arg GetPostsForUserParams) ([]GetPostsForUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getPostsForUser, arg.ID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPostsForUserRow
	for rows.Next() {
		var i GetPostsForUserRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Url,
			&i.Description,
			&i.PublishedAt,
			&i.FeedID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ID_2,
			&i.Name,
			&i.Url_2,
			&i.UserID,
			&i.CreatedAt_2,
			&i.UpdatedAt_2,
			&i.LastFetchedAt,
			&i.ID_3,
			&i.CreatedAt_3,
			&i.UpdatedAt_3,
			&i.Name_2,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
